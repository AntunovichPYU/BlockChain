import json
import random
import string
from hashlib import sha256


class Block:
    def __init__(self, index, prev_hash, server_id):
        self.index = index
        self.prev_hash = prev_hash
        self.server_id = server_id

        self.hash = None
        self.data = None

        self.nonce = 1
        self.generate_random_str()
        self.generate_hash()

    def generate_random_str(self):
        self.data = ''.join(random.choice(string.ascii_letters) for _ in range(256))

    def generate_hash(self):
        current_string = str(self.index) + self.prev_hash + self.data + str(self.nonce)
        current_hash = sha256(current_string.encode('utf-8'))
        while current_hash.hexdigest()[-4:] != "0000":
            self.nonce += random.randint(1, 30)
            current_string = str(self.index) + self.prev_hash + self.data + str(self.nonce)
            current_hash = sha256(current_string.encode('utf-8'))
        self.hash = current_hash.hexdigest()

    def block_to_json(self):
        block_dict = {
            'node': self.server_id,
            'index': self.index,
            'hash': self.hash,
            'prev_hash': self.prev_hash,
            'data': self.data,
            'nonce': self.nonce
        }
        return json.dumps(block_dict)

    @staticmethod
    def get_string(json_block):
        node_num = json_block['node'][0]
        index = int(json_block['index'])
        current_hash = json_block['hash']
        prev_hash = json_block['prev_hash']
        data = json_block['data']
        nonce = int(json_block['nonce'])

        ans = f'This block generated by Node [{node_num}]:     Index = {index}, Hash = {current_hash}, ' \
              f'Prev_Hash = {prev_hash}, Data = {data}, Nonce = {nonce}'
        return ans


class Node:
    def __init__(self, server_id):
        self.server_id = server_id
        self.block_index = None
        self.chain = []

    def handle_block(self, received_block_json):
        received_block = json.loads(received_block_json)
        index = int(received_block['index'])
        if index == 0:
            self.chain.append(received_block_json)
            self.block_index = 0
            print(Block.get_string(received_block))
            return True
        last_index = json.loads(self.chain[-1])['index']
        if index > last_index:
            self.chain.append(received_block_json)
            self.block_index = index
            print(Block.get_string(received_block))
            return True
        return False
